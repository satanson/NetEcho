/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NetEcho_H
#define NetEcho_H

#include <arpa/inet.h>
#include <TProcessor.h>
#include "echo_types.h"

namespace nynn { namespace mm {

class NetEchoIf {
 public:
  virtual ~NetEchoIf() {}
  virtual void echo(std::string& _return, const std::string& s) = 0;
};

class NetEchoIfFactory {
 public:
  typedef NetEchoIf Handler;

  virtual ~NetEchoIfFactory() {}

  virtual NetEchoIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(NetEchoIf* /* handler */) = 0;
};

class NetEchoIfSingletonFactory : virtual public NetEchoIfFactory {
 public:
  NetEchoIfSingletonFactory(const boost::shared_ptr<NetEchoIf>& iface) : iface_(iface) {}
  virtual ~NetEchoIfSingletonFactory() {}

  virtual NetEchoIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(NetEchoIf* /* handler */) {}

 protected:
  boost::shared_ptr<NetEchoIf> iface_;
};

class NetEchoNull : virtual public NetEchoIf {
 public:
  virtual ~NetEchoNull() {}
  void echo(std::string& /* _return */, const std::string& /* s */) {
    return;
  }
};

typedef struct _NetEcho_echo_args__isset {
  _NetEcho_echo_args__isset() : s(false) {}
  bool s;
} _NetEcho_echo_args__isset;

class NetEcho_echo_args {
 public:

  NetEcho_echo_args() : s("") {
  }

  virtual ~NetEcho_echo_args() throw() {}

  std::string s;

  _NetEcho_echo_args__isset __isset;

  void __set_s(const std::string& val) {
    s = val;
  }

  bool operator == (const NetEcho_echo_args & rhs) const
  {
    if (!(s == rhs.s))
      return false;
    return true;
  }
  bool operator != (const NetEcho_echo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetEcho_echo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NetEcho_echo_pargs {
 public:


  virtual ~NetEcho_echo_pargs() throw() {}

  const std::string* s;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NetEcho_echo_result__isset {
  _NetEcho_echo_result__isset() : success(false) {}
  bool success;
} _NetEcho_echo_result__isset;

class NetEcho_echo_result {
 public:

  NetEcho_echo_result() : success("") {
  }

  virtual ~NetEcho_echo_result() throw() {}

  std::string success;

  _NetEcho_echo_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const NetEcho_echo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NetEcho_echo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetEcho_echo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NetEcho_echo_presult__isset {
  _NetEcho_echo_presult__isset() : success(false) {}
  bool success;
} _NetEcho_echo_presult__isset;

class NetEcho_echo_presult {
 public:


  virtual ~NetEcho_echo_presult() throw() {}

  std::string* success;

  _NetEcho_echo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class NetEchoClient : virtual public NetEchoIf {
 public:
  NetEchoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  NetEchoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void echo(std::string& _return, const std::string& s);
  void send_echo(const std::string& s);
  void recv_echo(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class NetEchoProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<NetEchoIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (NetEchoProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_echo(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  NetEchoProcessor(boost::shared_ptr<NetEchoIf> iface) :
    iface_(iface) {
    processMap_["echo"] = &NetEchoProcessor::process_echo;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~NetEchoProcessor() {}
};

class NetEchoProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  NetEchoProcessorFactory(const ::boost::shared_ptr< NetEchoIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< NetEchoIfFactory > handlerFactory_;
};

class NetEchoMultiface : virtual public NetEchoIf {
 public:
  NetEchoMultiface(std::vector<boost::shared_ptr<NetEchoIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~NetEchoMultiface() {}
 protected:
  std::vector<boost::shared_ptr<NetEchoIf> > ifaces_;
  NetEchoMultiface() {}
  void add(boost::shared_ptr<NetEchoIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void echo(std::string& _return, const std::string& s) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->echo(_return, s);
        return;
      } else {
        ifaces_[i]->echo(_return, s);
      }
    }
  }

};

}} // namespace

#endif

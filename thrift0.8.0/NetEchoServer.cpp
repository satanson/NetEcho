// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "NetEcho.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <server/TNonblockingServer.h>
#include <concurrency/Thread.h>
#include <concurrency/ThreadManager.h>
#include <concurrency/PosixThreadFactory.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>
#include <iostream>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::apache::thrift::concurrency;

using boost::shared_ptr;

using namespace  ::nynn::mm;
using namespace std;
class NetEchoHandler : virtual public NetEchoIf {
 public:
  NetEchoHandler() {
    // Your initialization goes here
  }

  void echo(std::string& _return, const std::string& s) {
    // Your implementation goes here
	_return.resize(s.size());
	for (int i=0;i<s.size();++i)_return[i]=toupper(s[i]);
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  boost::shared_ptr<NetEchoHandler> handler(new NetEchoHandler());
  boost::shared_ptr<TProcessor> processor(new NetEchoProcessor(handler));
  //shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  boost::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  boost::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  //TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);

  boost::shared_ptr<ThreadFactory> pthreadFactory(new PosixThreadFactory());
  boost::shared_ptr<ThreadManager> threadManager=ThreadManager::newSimpleThreadManager(1,0);
  threadManager->threadFactory(pthreadFactory);
  TNonblockingServer server(processor,transportFactory,transportFactory,protocolFactory,protocolFactory,port,threadManager);
  threadManager->start();
  server.serve();
  cout<<"can reach here!"<<endl;

  server.serve();
  return 0;
}

